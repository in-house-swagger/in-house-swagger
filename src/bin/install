#!/bin/bash
#set -eux
#===================================================================================================
#
# in-house-swagger installer
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)" || exit 6

# 共通設定
readonly DIR_BASE="$(cd ..; pwd)"
. "./setenv"

# loggingユーティリティ
readonly PATH_LOG="${DIR_LOG}/$(basename \"$0\" .sh).log"
. "${DIR_BIN_LIB}/logging_utils.sh"


#---------------------------------------------------------------------------------------------------
# 前提チェック
#---------------------------------------------------------------------------------------------------
# java
if [[ "$(which java)x" = "x" ]]; then
  log.error_console "java がインストールされていません。"
  exit ${EXITCODE_ERROR}
fi

# curl
if [[ "$(which curl)x" = "x" ]]; then
  log.error_console "curl がインストールされていません。"
  exit ${EXITCODE_ERROR}
fi


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# ダウンロード
#-------------------------------------------------------------------------------
function local.download() {
  local _USAGE="Usage: ${FUNCNAME[0]} URL"

  log.save_indent
  log.info_console "${FUNCNAME[0]} $*"
  log.add_indent

  # 引数チェック
  if [[ $# -ne 1 ]]; then
    log.error_console "${_USAGE}"
    log.restore_indent
    return ${EXITCODE_ERROR}
  fi

  local _url="$1"
  local _path_output="${DIR_ARCHIVE}/$(basename ${_url})"
  local _exitcode=${EXITCODE_SUCCESS}
  local _retcode=${EXITCODE_SUCCESS}

  # ダウンロードディレクトリ作成
  if [[ ! -d "${DIR_ARCHIVE}" ]]; then
    mkdir -p "${DIR_ARCHIVE}"
    _retcode=$?
    if [[ ${EXITCODE_SUCCESS} -ne ${_retcode} ]]; then
      log.error_console "ディレクトリを作成できません。target:${DIR_ARCHIVE}, retcode:${_retcode}"
      log.restore_indent
      return ${EXITCODE_ERROR}
    fi
  fi

  # ダウンロード
  curl                                                                                               \
    --silent                                                                                         \
    --max-time ${DL_TIMEOUT}                                                                         \
    --location                                                                                       \
    --output "${_path_output}"                                                                       \
    --request GET                                                                                    \
    --url "${_url}"                                                                                |
  log.debug_console
  _retcode=${PIPESTATUS[0]}

  if [[ ${EXITCODE_SUCCESS} -ne ${_retcode} ]]; then
    log.error_console "ダウンロードに失敗しました。target:${_url}, retcode:${_retcode}"
    _exitcode=${EXITCODE_ERROR}
  else
    log.info_console "downloaded ${_path_output}"
  fi

  log.restore_indent
  return ${_exitcode}
}
function local.gracefull_download() {
  local _download_url="$1"
  local _path_downloaded="${DIR_ARCHIVE}/$(basename ${_download_url})"

  log.info_console "ダウンロード"
  log.add_indent
  if [[ -f "${_path_downloaded}" ]]; then
    log.info_console "スキップしました。"
  else
    local.download "${_download_url}"
    _retcode=$?
    if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
      return ${retcode}
    fi
  fi
  log.remove_indent
}

#-------------------------------------------------------------------------------
# 展開
#-------------------------------------------------------------------------------
function local.extract() {
  local _USAGE="Usage: ${FUNCNAME[0]} FROM_PATH TO_DIR"

  log.save_indent
  log.info_console "${FUNCNAME[0]} $*"
  log.add_indent

  # 引数チェック
  if [[ $# -ne 2 ]]; then
    log.error_console "${_USAGE}"
    log.restore_indent
    return ${EXITCODE_ERROR}
  fi

  # fromファイル
  local _path_from="$1"
  if [[ ! -f "${_path_from}" ]]; then
    log.error_console "${_path_from} が存在しません。"
    log.restore_indent
    return ${EXITCODE_ERROR}
  fi

  # 展開ディレクトリ
  local _dir_to="$2"
  if [[ -d "${_dir_to}" ]]; then
    log.warn_console "${_dir_to} はすでに存在するため、削除しました。"
    rm -fr "${_dir_to}"
  fi
  mkdir -p "${_dir_to}"

  # 拡張子判定
  local _ext_from="$(get_ext ${_path_from})"

  # 展開
  local _tmp_path="${_dir_to}/$(basename ${_path_from})"
  cd "${_dir_to}"
  mv "${_path_from}" "${_dir_to}/"
  if [[ "zip" = "${_ext_from}" ]]; then
    # zip
    log.info_console "unzip \"${_tmp_path}\""
    unzip "${_tmp_path}" 2>&1 | log.info_console

  elif [[ "tar.gz" = "${_ext_from}" || "tgz" = "${_ext_from}" ]]; then
    # tar.gz
    log.info_console "tar xvzf \"${_tmp_path}\""
    tar xvzf "${_tmp_path}" 2>&1 | log.info_console

  else
    log.error_console "展開に対応していない拡張子です。target:${_ext_from}"
  fi
  mv "${_tmp_path}" "${_path_from}"
  cd - > /dev/null

  # 展開結果を一つ上のディレクトリに移動
  local _dirname_extracted="$(ls ${_dir_to} | head -n 1)"
  mv "${_dir_to}/${_dirname_extracted}"/* "${_dir_to}/"
  rm -fr "${_dir_to}/${_dirname_extracted}"

  local _exitcode=${EXITCODE_SUCCESS}
  local _retcode=${EXITCODE_SUCCESS}

  log.restore_indent
  return ${_exitcode}
}

#-------------------------------------------------------------------------------
# インストール（DL + 展開タイプ）
#-------------------------------------------------------------------------------
function local.install() {
  log.save_indent

  local _target="$1"
  local _download_url="$2"
  local _path_downloaded="${DIR_ARCHIVE}/$(basename ${_download_url})"
  local _path_extracted="$3"

  local _retcode=${EXITCODE_SUCCESS}

  log.info_console "${_target}"
  log.add_indent

  # ダウンロード
  local.gracefull_download "${_download_url}"
  _retcode=$?
  if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
    return ${retcode}
  fi

  # インストール
  log.info_console "インストール"
  log.add_indent
  local.extract "${_path_downloaded}" "${_path_extracted}"
  _retcode=$?
  if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
    return ${retcode}
  fi
  log.remove_indent

  log.restore_indent
  return ${_exitcode}
}


#---------------------------------------------------------------------------------------------------
# 事前処理
#---------------------------------------------------------------------------------------------------
exitcode=${EXITCODE_SUCCESS}
retcode=${EXITCODE_SUCCESS}


#---------------------------------------------------------------------------------------------------
# 本処理
#---------------------------------------------------------------------------------------------------
log.info_console "インストール"
log.add_indent


#-------------------------------------------------------------------------------
# jetty
#-------------------------------------------------------------------------------
local.install "jetty" "${DOWNLOAD_URL_JETTY}" "${DIR_JETTY}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi

log.info_console "jetty-config"
log.add_indent

# request log
log.info_console "request log"
log.add_indent
java -jar ${DIR_JETTY}/start.jar                                                                     \
  --create-startd --add-to-start=requestlog                                                          \
  jetty.base="${DIR_JETTY}"                                                                   2>&1 |
log.info_console
retcode=${PIPESTATUS[0]}
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi
log.remove_indent

# context.xml
log.info_console "context"
log.add_indent
log.info_console "cp \"${DIR_CONFIG}/install/contexts\"/* \"${DIR_JETTY}/webapps/\""
cp "${DIR_CONFIG}/install/contexts"/* "${DIR_JETTY}/webapps/"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi
log.remove_indent

# TODO ログ出力設定も、ここで定義

log.remove_indent


#-------------------------------------------------------------------------------
# groovy
#-------------------------------------------------------------------------------
local.install "groovy" "${DOWNLOAD_URL_GROOVY}" "${DIR_GROOVY}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi


#-------------------------------------------------------------------------------
# editor
#-------------------------------------------------------------------------------
local.install "swagger-editor" "${DOWNLOAD_URL_EDITOR}" "${DIR_EDITOR}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi


#-------------------------------------------------------------------------------
# ui
#-------------------------------------------------------------------------------
local.install "swagger-ui" "${DOWNLOAD_URL_UI}" "${DIR_UI}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi


#-------------------------------------------------------------------------------
# generator
#-------------------------------------------------------------------------------
log.save_indent
log.info_console "swagger-generator"
log.add_indent

# ダウンロード
local.gracefull_download "${DOWNLOAD_URL_GENERATOR}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi

# インストール
log.info_console "インストール"
log.add_indent

log.info_console "cp -pf \"${DIR_ARCHIVE}/$(basename ${DOWNLOAD_URL_GENERATOR})\" \"${PATH_GENERATOR}\""
cp -pf "${DIR_ARCHIVE}/$(basename ${DOWNLOAD_URL_GENERATOR})" "${PATH_GENERATOR}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi

log.remove_indent

log.restore_indent


#-------------------------------------------------------------------------------
# codegen-cli
#-------------------------------------------------------------------------------
log.save_indent
log.info_console "swagger-codegen-cli"
log.add_indent

# ダウンロード
local.gracefull_download "${DOWNLOAD_URL_CODEGEN_CLI}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi

# インストール
log.info_console "インストール"
log.add_indent

log.info_console "cp -pf \"${DIR_ARCHIVE}/$(basename ${DOWNLOAD_URL_CODEGEN_CLI})\" \"${PATH_CODEGEN_CLI}\""
cp -pf "${DIR_ARCHIVE}/$(basename ${DOWNLOAD_URL_CODEGEN_CLI})" "${PATH_CODEGEN_CLI}"
retcode=$?
if [[ ${EXITCODE_SUCCESS} -ne ${retcode} ]]; then
  exit ${retcode}
fi

log.remove_indent

# デフォルトテンプレート
log.info_console "デフォルトテンプレートの抽出"
log.add_indent

dir_template_work="/tmp/work_$$"
dir_template_default="${DIR_CONFIG}/templates/_default"
mkdir -p "${dir_template_work}"
if [[ -d "${dir_template_default}" ]]; then
  rm -fr "${dir_template_default}"
fi
mkdir -p "${dir_template_default}"

# 展開
unzip ${PATH_CODEGEN_CLI} -d "${dir_template_work}"
# templateディレクトリを移動
find "${dir_template_work}" -mindepth 2 -maxdepth 2 -type f -name "*mustache"                      | # mustacheファイルをリスト
xargs -I{} bash -c 'dirname {}'                                                                    | # ディレクトリをリスト
uniq                                                                                               | # 一意に絞る
xargs -I{} bash -c "mv {} ${dir_template_default}/"                                                  # サンプルディレクトリに移動
# 展開ディレクトリを削除
rm -fr "${dir_template_work}"

log.info_console "デフォルトテンプレート"
ls "${dir_template_default}"
log.remove_indent

log.restore_indent



#---------------------------------------------------------------------------------------------------
# 事後処理
#---------------------------------------------------------------------------------------------------
log.info_console "インストールが完了しました。"
exit ${exitcode}
