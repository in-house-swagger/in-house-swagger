#!/bin/bash
#===================================================================================================
#
# in-house-swagger server control
#
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 設定
#---------------------------------------------------------------------------------------------------
dir_script="$(dirname $0)"
cd "$(cd ${dir_script}; pwd)" || exit 6

# 共通設定
readonly DIR_BASE="$(cd ..; pwd)"
. "./setenv"

# loggingユーティリティ
readonly PATH_LOG="${DIR_LOG}/$(basename \"$0\" .sh).log"
. "${DIR_BIN_LIB}/logging_utils.sh"


#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function start() {
  ${DIR_JETTY}/bin/jetty.sh start

  # TODO jettyを起動
  # PIDファイルを作成
  # ※jettyの起動スクリプトですでに考慮されているかも。それなら考慮不要。
}

function stop() {
  ${DIR_JETTY}/bin/jetty.sh stop

  # TODO jettyを停止
  # PIDファイルを削除
}

function restert() {
  ${DIR_JETTY}/bin/jetty.sh restart

  # TODO PIDファイルの存在を確認
    # 存在する場合、PIDの存在チェック
      # PIDが実行中の場合、stop + start
      # PIDが存在しない場合、PIDファイルを削除
    # 存在しない場合、停止中なので startのみ
}


#---------------------------------------------------------------------------------------------------
# 事前処理
#---------------------------------------------------------------------------------------------------
exitcode=${EXITCODE_SUCCESS}

# 引数チェック
if [[ $# -ne 1 ]]; then
  log.error_console "Usage: $(basenae $0) start|stop|restart"
fi

# mode
mode="$1"


#---------------------------------------------------------------------------------------------------
# 本処理
#---------------------------------------------------------------------------------------------------
if [[ "${mode}" = "start" ]]; then
  start
  exitcode=$?
elif [[ "${mode}" = "stop" ]]; then
  stop
  exitcode=$?
elif [[ "${mode}" = "restart" ]]; then
  restart
  exitcode=$?
else
  log.error_console "想定外の起動モードです。mode:${mode}"
  exitcode=${EXITCODE_ERROR}
fi


#---------------------------------------------------------------------------------------------------
# 事後処理
#---------------------------------------------------------------------------------------------------
exit ${exitcode}
